SHELL := $(shell which bash)
IMAGE := vim-testbed-example
PLUGINS := test/plugins

DOCKER = docker run -ti --rm \
	-v $(CURDIR):/testbed \
	$(if $(TEMPDIR),-v $(TEMPDIR):$(TEMPDIR)) \
	-v $(CURDIR)/$(PLUGINS):/home/testbed/.vim/plugins "$(IMAGE)"

test: TEMPDIR:=$(shell mktemp -d -u)
test: build $(PLUGINS)/vader.vim
test: test_vim71_with_profiling_enabled
test:
	set -ex; \
	mkdir -m 0777 $(TEMPDIR); \
	vims="$$(docker run --rm $(IMAGE) ls /vim-build/bin | grep vim)"; \
	if [ -z "$$vims" ]; then echo "No Vims found!"; exit 1; fi; \
	count_vims=0; \
	for vim in $$vims; do \
	  (( ++count_vims )); \
	  $(DOCKER) $$vim '+Vader! test/*'; \
	done; \
	expected_vims=$$(egrep -c -- '^[^#]+\s-tag' Dockerfile.tests); \
	if [ "$$count_vims" != "$$expected_vims" ]; then \
	  echo "Expected $$expected_vims Vims, but found $$count_vims: $$vims" >&2; \
	  exit 1; \
	fi; \
	for vim in "neovim-master --headless" vim-master; do \
	  $(DOCKER) $${vim} -u NONE \
	    "+py  import sys; open('$(TEMPDIR)/py2', 'w').write(str(sys.version_info[0]))" \
	    "+py3 import sys; open('$(TEMPDIR)/py3', 'w').write(str(sys.version_info[0]))" \
	    '+q'; \
	  if [ "$$(<$(TEMPDIR)/py2)" != "2" ]; then \
	    echo "Failed to get Python version from $${vim} (2)." >&2; exit 1; \
	  fi; \
	  if [ "$$(<$(TEMPDIR)/py3)" != "3" ]; then \
	    echo "Failed to get Python version from $${vim} (3)." >&2; exit 1; \
	  fi; \
	  $(RM) $(TEMPDIR)/py*; \
	done; \
	for vim in "neovim-master --headless" vim-master; do \
	  $(DOCKER) $${vim} -u NONE \
	    "+ruby open('$(TEMPDIR)/ruby', 'w') { |f| f << 'ruby was here' }" \
	    '+q'; \
	  if [ "$$(<$(TEMPDIR)/ruby)" != "ruby was here" ]; then \
	    echo "Failed to get output from Ruby for $${vim}." >&2; exit 1; \
	  fi; \
	  $(RM) $(TEMPDIR)/ruby; \
	done; \
	for vim in "neovim-master --headless" vim-master; do \
	  $(DOCKER) $${vim} -u NONE \
	  "+lua io.open('$(TEMPDIR)/lua', 'w'):write('lua was here')" \
	  '+q'; \
	  if [ "$$(<$(TEMPDIR)/lua)" != "lua was here" ]; then \
	    echo "Failed to get output from Lua for $${vim}." >&2; exit 1; \
	  fi; \
	done; \
	neovim_tag_version=$$(docker run --rm "$(IMAGE)" neovim-v0.2.0 -u NONE --version | grep '^NVIM'); \
	if [ "$$neovim_tag_version" != 'NVIM v0.2.0' ]; then \
	  echo "Unexpected version for Neovim tag: $$neovim_tag_version" >&2; \
	  exit 1; \
	fi; \
	neovim_master_version=$$(docker run --rm "$(IMAGE)" neovim-master -u NONE --version | grep '^NVIM'); \
	if ! echo "$$neovim_master_version" | grep -Eq '^NVIM v[0-9.]+-dev'; then \
	  echo "Unexpected version for Neovim master: $$neovim_master_version" >&2; \
	  exit 1; \
	fi

test_vim71_with_profiling_enabled:
	docker run --rm "$(IMAGE)" vim71 -es -u NORC -c "exe has('profile') ? 'q' : 'cq'" || { \
	  echo "vim71 should have FEAT_PROFILE enabled."; \
	  docker run --rm "$(IMAGE)" vim71 --version; \
	  exit 1; }

build: Dockerfile.tests
	docker build -f Dockerfile.tests -t "$(IMAGE)" .

Dockerfile.tests: Dockerfile
	( echo '# Autogenerated Dockerfile for tests.'; \
	  echo '# Edit with care (generated from updates to Dockerfile).'; \
	  sed 's~testbed/vim~vim-testbed-base~' $< ) > $@

$(PLUGINS)/vader.vim:
	mkdir -p $(PLUGINS)
	cd $(PLUGINS) && git clone https://github.com/junegunn/vader.vim.git

.PHONY: test-setup test
