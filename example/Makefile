SHELL := $(shell which bash)
IMAGE := vim-testbed-example
PLUGINS := test/plugins
# A writable home directory, required for Neovim.
WRITABLE_HOME:=$(shell tmpdir=$$(mktemp -d --dry-run); \
	mkdir -m 777 $${tmpdir}; \
	cd $(CURDIR)/test; \
	cp -a vimrc *.vader $${tmpdir}/; \
	echo $${tmpdir})
DOCKER = docker run -a stderr --rm \
	-v $(CURDIR):/testplugin \
	-v $(WRITABLE_HOME):/home/vimtest \
	-v $(CURDIR)/$(PLUGINS):/home/vimtest/plugins "$(IMAGE)"

test: test-setup
	docker build -f Dockerfile.tests -t "$(IMAGE)" .
	set -ex; \
	vims="$$(docker run --rm $(IMAGE) ls /vim-build/bin | grep vim)"; \
	if [ -z "$$vims" ]; then echo "No Vims found!"; exit 1; fi; \
	count_vims=0; \
	for vim in $$vims; do \
	  (( ++count_vims )); \
	  $(DOCKER) $$vim '+Vader! test/*'; \
	done; \
	expected_vims=$$(egrep -c -- '^[^#]+\s-tag' Dockerfile.tests); \
	if [ "$$count_vims" != "$$expected_vims" ]; then \
	  echo "Expected $$expected_vims Vims, but found $$count_vims: $$vims" >&2; \
	  exit 1; \
	fi; \
	for vim in "neovim-master --headless" vim-master; do \
	  $(DOCKER) $${vim} -u NONE \
	    "+py  import sys; open('/home/vimtest/py2', 'w').write(str(sys.version_info[0]))" \
	    "+py3 import sys; open('/home/vimtest/py3', 'w').write(str(sys.version_info[0]))" \
	    '+q'; \
	  if [ "$$(<$(WRITABLE_HOME)/py2)" != "2" ]; then \
	    echo "Failed to get Python version from $${vim} (2)." >&2; exit 1; \
	  fi; \
	  if [ "$$(<$(WRITABLE_HOME)/py3)" != "3" ]; then \
	    echo "Failed to get Python version from $${vim} (3)." >&2; exit 1; \
	  fi; \
	  $(RM) $(WRITABLE_HOME)/py*; \
	done; \
	for vim in "neovim-master --headless" vim-master; do \
	  $(DOCKER) $${vim} -u NONE \
	    "+ruby open('/home/vimtest/ruby', 'w') { |f| f << 'ruby was here' }" \
	    '+q'; \
	  if [ "$$(<$(WRITABLE_HOME)/ruby)" != "ruby was here" ]; then \
	    echo "Failed to get output from Ruby for $${vim}." >&2; exit 1; \
	  fi; \
	  $(RM) $(WRITABLE_HOME)/ruby; \
	done; \
	for vim in "neovim-master --headless" vim-master; do \
	  $(DOCKER) $${vim} -u NONE \
	  "+lua io.open('/home/vimtest/lua', 'w'):write('lua was here')" \
	  '+q'; \
	  if [ "$$(<$(WRITABLE_HOME)/lua)" != "lua was here" ]; then \
	    echo "Failed to get output from Lua for $${vim}." >&2; exit 1; \
	  fi; \
	done; \
	neovim_tag_version=$$(docker run --rm "$(IMAGE)" neovim-v0.2.0 -u NONE --version | grep '^NVIM'); \
	if [ "$$neovim_tag_version" != 'NVIM v0.2.0' ]; then \
	  echo "Unexpected version for Neovim tag: $$neovim_tag_version" >&2; \
	  exit 1; \
	fi; \
	neovim_master_version=$$(docker run --rm "$(IMAGE)" neovim-master -u NONE --version | grep '^NVIM'); \
	if ! echo "$$neovim_master_version" | grep -Eq '^NVIM v[0-9.]+-dev-[0-9a-f]+$$'; then \
	  echo "Unexpected version for Neovim master: $$neovim_master_version" >&2; \
	  exit 1; \
	fi;

test-setup: Dockerfile.tests $(PLUGINS)/vader.vim
	docker images -q $(IMAGE) || docker pull $(IMAGE)

Dockerfile.tests: Dockerfile
	( echo '# Autogenerated Dockerfile for tests.'; \
	  echo '# Edit with care (generated from updates to Dockerfile).'; \
	  sed 's~testbed/vim~vim-testbed-base~' $< ) > $@

$(PLUGINS)/vader.vim:
	mkdir -p $(PLUGINS)
	cd $(PLUGINS) && git clone https://github.com/junegunn/vader.vim.git

.PHONY: test-setup test
